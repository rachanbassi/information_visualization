

# SQL query for calculating the quote rate on a monthly basis: For every request, the quote rate was calculated by dividing the number of quotes which came back by the number of invites sent for that request. This query prints out the creation time in terms of month of the year so it is easier to aggregated data and analyze based on weeks for further analysis in R.

SELECT final_request_id, COUNT(final_request_id) as num_invites_sent, SUM(final_quote_count) as num_quotes_recieved,  (SUM(final_quote_count)*100)/COUNT(final_request_id), creation_time 
FROM 
(SELECT final_table.request_id as final_request_id, final_table.invite_id as final_invite_id, COUNT(final_table.quote_id) as final_quote_count, strftime('%m',final_table.creation_time) as creation_time, strftime('%m',final_table.sent_time) as invite_sent_time  
FROM
(SELECT * FROM (SELECT * FROM requests LEFT JOIN invites ON requests.request_id = invites.request_id) as lhs
LEFT JOIN quotes ON quotes.invite_id = lhs.invite_id) as final_table GROUP BY final_table.invite_id) GROUP BY final_request_id;


# SQL query for calculating the quote rate on a weekly basis: For every request, the quote rate was calculated by dividing the number of quotes which came back by the number of invites sent for that request. This query prints out the creation time in terms of week of the year so it is easier to aggregated data and analyze based on weeks for further analysis in R.

SELECT final_request_id, COUNT(final_request_id) as num_invites_sent, SUM(final_quote_count) as num_quotes_recieved,  (SUM(final_quote_count)*100)/COUNT(final_request_id), creation_time 
FROM 
(SELECT final_table.request_id as final_request_id, final_table.invite_id as final_invite_id, COUNT(final_table.quote_id) as final_quote_count, strftime('%W',final_table.creation_time) as creation_time, strftime('%W',final_table.sent_time) as invite_sent_time  
FROM
(SELECT * FROM (SELECT * FROM requests LEFT JOIN invites ON requests.request_id = invites.request_id) as lhs
LEFT JOIN quotes ON quotes.invite_id = lhs.invite_id) as final_table GROUP BY final_table.invite_id) GROUP BY final_request_id;


# SQL query or finding the average quote rate on a daily basis:

SELECT AVG(final_ratio), COUNT(final_ratio), creation_time 
FROM 
(SELECT   (SUM(final_quote_count)*100)/COUNT(final_request_id) as final_ratio, creation_time 
FROM 
(SELECT final_table.request_id as final_request_id, final_table.invite_id as final_invite_id, COUNT(final_table.quote_id) as final_quote_count, strftime('%j',final_table.creation_time) as creation_time, strftime('%j',final_table.sent_time) as invite_sent_time  
FROM
(SELECT * FROM (SELECT * FROM requests LEFT JOIN invites ON requests.request_id = invites.request_id) as lhs
LEFT JOIN quotes ON quotes.invite_id = lhs.invite_id) as final_table GROUP BY final_table.invite_id) GROUP BY final_request_id) GROUP BY creation_time;


# SQL query for finding the average quote rate on a weekly basis:

SELECT AVG(final_ratio), COUNT(final_ratio), creation_time 
FROM 
(SELECT   (SUM(final_quote_count)*100)/COUNT(final_request_id) as final_ratio, creation_time 
FROM 
(SELECT final_table.request_id as final_request_id, final_table.invite_id as final_invite_id, COUNT(final_table.quote_id) as final_quote_count, strftime('%W',final_table.creation_time) as creation_time, strftime('%W',final_table.sent_time) as invite_sent_time  
FROM
(SELECT * FROM (SELECT * FROM requests LEFT JOIN invites ON requests.request_id = invites.request_id) as lhs
LEFT JOIN quotes ON quotes.invite_id = lhs.invite_id) as final_table GROUP BY final_table.invite_id) GROUP BY final_request_id) GROUP BY creation_time;




